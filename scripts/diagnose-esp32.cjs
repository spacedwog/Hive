/**
 * Script de diagn√≥stico ESP32
 * Testa conectividade e configura√ß√£o do ESP32
 */

const http = require('http');
const https = require('https');

// Configura√ß√µes do .env
const ESP32_STA_IP = '192.168.15.188';
const ESP32_SOFTAP_IP = '192.168.4.1';
const AUTH_USERNAME = 'spacedwog';
const AUTH_PASSWORD = 'Kimera12@';

const colors = {
  reset: '\x1b[0m',
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  cyan: '\x1b[36m',
};

function log(message, color = colors.reset) {
  console.log(`${color}${message}${colors.reset}`);
}

function makeRequest(host, path, timeout = 5000) {
  return new Promise((resolve, reject) => {
    const options = {
      hostname: host,
      port: 80,
      path: path,
      method: 'GET',
      timeout: timeout,
      headers: {
        'Authorization': 'Basic ' + Buffer.from(`${AUTH_USERNAME}:${AUTH_PASSWORD}`).toString('base64')
      }
    };

    const req = http.request(options, (res) => {
      let data = '';
      res.on('data', chunk => data += chunk);
      res.on('end', () => {
        resolve({
          statusCode: res.statusCode,
          data: data,
          headers: res.headers
        });
      });
    });

    req.on('timeout', () => {
      req.destroy();
      reject(new Error('Timeout'));
    });

    req.on('error', (err) => {
      reject(err);
    });

    req.end();
  });
}

async function testConnection(ip, mode) {
  log(`\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`, colors.cyan);
  log(`üß™ Testando modo ${mode} (${ip})`, colors.blue);
  log(`‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`, colors.cyan);

  // Teste 1: Ping b√°sico (tentativa de conex√£o)
  log(`\n[1/4] üèì Teste de conectividade b√°sica...`, colors.yellow);
  try {
    const result = await makeRequest(ip, '/status', 5000);
    log(`  ‚úÖ Conectividade OK (Status HTTP ${result.statusCode})`, colors.green);
    
    // Teste 2: Parse do JSON
    log(`\n[2/4] üì¶ Validando resposta JSON...`, colors.yellow);
    try {
      const jsonData = JSON.parse(result.data);
      log(`  ‚úÖ JSON v√°lido recebido`, colors.green);
      log(`  üìä Dados recebidos:`, colors.cyan);
      console.log(JSON.stringify(jsonData, null, 2));
      
      // Teste 3: Validar estrutura esperada
      log(`\n[3/4] üîç Validando estrutura de dados...`, colors.yellow);
      const expectedFields = ['led_builtin', 'led_opposite', 'sensor_db', 'ip_ap', 'ip_sta'];
      const missingFields = expectedFields.filter(field => !(field in jsonData));
      
      if (missingFields.length === 0) {
        log(`  ‚úÖ Estrutura de dados completa`, colors.green);
      } else {
        log(`  ‚ö†Ô∏è  Campos faltando: ${missingFields.join(', ')}`, colors.yellow);
      }
      
      // Teste 4: Verificar IPs configurados
      log(`\n[4/4] üåê Verificando configura√ß√£o de rede...`, colors.yellow);
      log(`  IP AP (Soft-AP): ${jsonData.ip_ap || 'N/A'}`, colors.cyan);
      log(`  IP STA (WiFi): ${jsonData.ip_sta || 'N/A'}`, colors.cyan);
      
      if (jsonData.ip_sta && jsonData.ip_sta !== ip && mode === 'STA') {
        log(`  ‚ö†Ô∏è  AVISO: IP no .env (${ip}) diferente do ESP32 (${jsonData.ip_sta})`, colors.yellow);
        log(`  üí° Atualize o .env com: ESP32_STA_IP=http://${jsonData.ip_sta}`, colors.yellow);
      } else if (mode === 'STA') {
        log(`  ‚úÖ IP configurado corretamente`, colors.green);
      }
      
      return true;
    } catch (parseErr) {
      log(`  ‚ùå Erro ao parsear JSON: ${parseErr.message}`, colors.red);
      log(`  üìÑ Resposta raw:`, colors.yellow);
      console.log(result.data);
      return false;
    }
  } catch (err) {
    log(`  ‚ùå Falha na conectividade: ${err.message}`, colors.red);
    
    if (err.message === 'Timeout') {
      log(`  üí° O ESP32 n√£o respondeu em 5 segundos`, colors.yellow);
      log(`     - Verifique se est√° ligado`, colors.yellow);
      log(`     - Confirme que est√° na mesma rede (para modo STA)`, colors.yellow);
    } else if (err.code === 'ECONNREFUSED') {
      log(`  üí° Conex√£o recusada`, colors.yellow);
      log(`     - O ESP32 pode estar ligado mas n√£o aceitando conex√µes`, colors.yellow);
      log(`     - Verifique o firmware do ESP32`, colors.yellow);
    } else if (err.code === 'ENETUNREACH' || err.code === 'EHOSTUNREACH') {
      log(`  üí° Rede inacess√≠vel`, colors.yellow);
      log(`     - Voc√™ n√£o est√° na mesma rede que o ESP32`, colors.yellow);
      log(`     - Para modo STA: conecte-se ao mesmo WiFi`, colors.yellow);
      log(`     - Para Soft-AP: conecte-se √† rede do ESP32`, colors.yellow);
    }
    
    return false;
  }
}

async function getSystemInfo() {
  const os = require('os');
  const networkInterfaces = os.networkInterfaces();
  
  log(`\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`, colors.cyan);
  log(`üíª Informa√ß√µes do Sistema`, colors.blue);
  log(`‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`, colors.cyan);
  
  log(`\nüì± Interfaces de rede ativas:`, colors.yellow);
  
  for (const [name, interfaces] of Object.entries(networkInterfaces)) {
    const ipv4 = interfaces.find(iface => iface.family === 'IPv4' && !iface.internal);
    if (ipv4) {
      log(`  ‚Ä¢ ${name}: ${ipv4.address}`, colors.green);
      
      // Verifica se est√° na mesma sub-rede que o ESP32
      const deviceSubnet = ipv4.address.split('.').slice(0, 3).join('.');
      const esp32Subnet = ESP32_STA_IP.split('.').slice(0, 3).join('.');
      
      if (deviceSubnet === esp32Subnet) {
        log(`    ‚úÖ Na mesma sub-rede que o ESP32 (${esp32Subnet}.x)`, colors.green);
      }
    }
  }
}

async function main() {
  log(`\n‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó`, colors.cyan);
  log(`‚ïë   üîß Diagn√≥stico ESP32 - Hive App      ‚ïë`, colors.cyan);
  log(`‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù`, colors.cyan);
  
  await getSystemInfo();
  
  log(`\nüìã Configura√ß√µes do .env:`, colors.yellow);
  log(`  ESP32_STA_IP: http://${ESP32_STA_IP}`, colors.cyan);
  log(`  ESP32_SOFTAP_IP: http://${ESP32_SOFTAP_IP}`, colors.cyan);
  
  // Testa modo STA (WiFi normal)
  const staSuccess = await testConnection(ESP32_STA_IP, 'STA');
  
  // Testa modo Soft-AP (ponto de acesso do ESP32)
  const apSuccess = await testConnection(ESP32_SOFTAP_IP, 'Soft-AP');
  
  // Resumo final
  log(`\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`, colors.cyan);
  log(`üìä Resumo do Diagn√≥stico`, colors.blue);
  log(`‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`, colors.cyan);
  
  if (staSuccess) {
    log(`\n‚úÖ Modo STA funcionando corretamente`, colors.green);
    log(`   Use este IP no app: http://${ESP32_STA_IP}`, colors.green);
  } else {
    log(`\n‚ùå Modo STA n√£o est√° acess√≠vel`, colors.red);
  }
  
  if (apSuccess) {
    log(`\n‚úÖ Modo Soft-AP funcionando corretamente`, colors.green);
    log(`   Conecte-se √† rede WiFi do ESP32 e use: http://${ESP32_SOFTAP_IP}`, colors.green);
  } else {
    log(`\n‚ùå Modo Soft-AP n√£o est√° acess√≠vel`, colors.red);
  }
  
  if (!staSuccess && !apSuccess) {
    log(`\nüî¥ PROBLEMA CR√çTICO: Nenhum modo est√° funcionando`, colors.red);
    log(`\nüîß Pr√≥ximos passos:`, colors.yellow);
    log(`   1. Verifique se o ESP32 est√° ligado (LED deve estar aceso)`, colors.yellow);
    log(`   2. Verifique o cabo USB e a fonte de alimenta√ß√£o`, colors.yellow);
    log(`   3. Acesse o monitor serial do ESP32 para ver logs`, colors.yellow);
    log(`   4. Reflashe o firmware se necess√°rio`, colors.yellow);
    log(`   5. Verifique se o firewall n√£o est√° bloqueando a conex√£o`, colors.yellow);
  } else if (staSuccess && !apSuccess) {
    log(`\nüí° RECOMENDA√á√ÉO: Use o modo STA`, colors.yellow);
    log(`   O modo STA est√° funcionando. Certifique-se de estar sempre na mesma rede WiFi.`, colors.yellow);
  } else if (!staSuccess && apSuccess) {
    log(`\nüí° RECOMENDA√á√ÉO: Use o modo Soft-AP temporariamente`, colors.yellow);
    log(`   Para usar o modo STA:`, colors.yellow);
    log(`   1. Conecte-se √† rede WiFi do ESP32 (Soft-AP)`, colors.yellow);
    log(`   2. Configure as credenciais WiFi do ESP32`, colors.yellow);
    log(`   3. Anote o novo IP que o ESP32 receber`, colors.yellow);
    log(`   4. Atualize o .env com o novo IP`, colors.yellow);
  }
  
  log(`\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n`, colors.cyan);
}

main().catch(err => {
  log(`\n‚ùå Erro fatal no diagn√≥stico: ${err.message}`, colors.red);
  console.error(err);
  process.exit(1);
});
